{"/home/travis/build/npmtest/node-npmtest-gulp-usemin/test.js":"/* istanbul instrument in package npmtest_gulp_usemin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-usemin/lib.npmtest_gulp_usemin.js":"/* istanbul instrument in package npmtest_gulp_usemin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_usemin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_usemin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-usemin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-usemin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_usemin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_usemin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_usemin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_usemin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_usemin.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_usemin.__dirname +\n                    '/lib.npmtest_gulp_usemin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-usemin/node_modules/gulp-usemin/index.js":"module.exports = function(options) {\n  var through = require('through2');\n  var gutil = require('gulp-util');\n  var blocksBuilder = require('./lib/blocksBuilder.js');\n  var htmlBuilder = require('./lib/htmlBuilder.js');\n\n  return through.obj(function(file, enc, callback) {\n    if (file.isStream()) {\n      this.emit('error', new gutil.PluginError('gulp-usemin', 'Streams are not supported!'));\n      callback();\n    }\n    else if (file.isNull())\n      callback(null, file); // Do nothing if no contents\n    else {\n      try {\n        var blocks = blocksBuilder(file, options);\n        htmlBuilder(file, blocks, options, this.push.bind(this), callback);\n      } catch(e) {\n        this.emit('error', e);\n        callback();\n      }\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-usemin/node_modules/gulp-usemin/gulpfile.js":"/* jshint node:true */\n\n'use strict';\n\nvar gulp = require('gulp');\nvar jshint = require('gulp-jshint');\nvar mocha = require('gulp-mocha');\n\ngulp.task('lint', function() {\n\treturn gulp.src('test/main.js')\n\t\t.pipe(jshint())\n\t\t.pipe(jshint.reporter('default'))\n\t\t.pipe(mocha());\n});\n\ngulp.task('default', ['lint']);","/home/travis/build/npmtest/node-npmtest-gulp-usemin/node_modules/gulp-usemin/lib/blocksBuilder.js":"var fs = require('fs');\r\nvar glob = require('glob');\r\nvar path = require('path');\r\nvar gutil = require('gulp-util');\r\n\r\nmodule.exports = function(file, options) {\r\n  options = options || {};\r\n\r\n  var startReg = /<!--\\s*build:(\\w+)(?:(?:\\(([^\\)]+?)\\))?\\s+(\\/?([^\\s]+?))?)?\\s*-->/gim;\r\n  var endReg = /<!--\\s*endbuild\\s*-->/gim;\r\n  var jsReg = /<\\s*script\\s+.*?src\\s*=\\s*['\"]?([^'\"?# ]+).*?><\\s*\\/\\s*script\\s*>/gi;\r\n  var cssReg = /<\\s*link\\s+.*?href\\s*=\\s*['\"]?([^'\"?# ]+).*?>/gi;\r\n  var cssMediaReg = /<\\s*link\\s+.*?media\\s*=\\s*['\"]?([^'\"]+).*?>/gi;\r\n  var startCondReg = /<!--\\[[^\\]]+\\]>/gim;\r\n  var endCondReg = /<!\\[endif\\]-->/gim;\r\n\r\n  var basePath = file.base;\r\n  var mainPath = path.dirname(file.path);\r\n  var outputPath = options.outputRelativePath || '';\r\n  var content = String(file.contents);\r\n  var sections = content.split(endReg);\r\n  var blocks = [];\r\n  var cssMediaQuery = null;\r\n\r\n  function getFiles(content, reg, alternatePath) {\r\n    var paths = [];\r\n    var files = [];\r\n    cssMediaQuery = null;\r\n\r\n    content\r\n      .replace(startCondReg, '')\r\n      .replace(endCondReg, '')\r\n      .replace(/<!--(?:(?:.|\\r|\\n)*?)-->/gim, function (a) {\r\n        return options.enableHtmlComment ? a : '';\r\n      })\r\n      .replace(reg, function (a, b) {\r\n        var filePath = path.resolve(path.join(\r\n          alternatePath || options.path || mainPath,\r\n          b.replace(/^'|^\"/, '').replace(/'$/, '').replace(/\"$/, '')\r\n        ));\r\n\r\n        if (options.assetsDir)\r\n          filePath = path.resolve(path.join(options.assetsDir, path.relative(basePath, filePath)));\r\n\r\n        paths.push(filePath);\r\n      });\r\n\r\n    if (reg === cssReg) {\r\n      content.replace(cssMediaReg, function(a, media) {\r\n        media = media.replace(/^'|^\"/, '').replace(/'$/, '').replace(/\"$/, '');\r\n\r\n        if (!cssMediaQuery) {\r\n          cssMediaQuery = media;\r\n        } else {\r\n          if (cssMediaQuery != media)\r\n            throw new gutil.PluginError('gulp-usemin', 'incompatible css media query for ' + a + ' detected.');\r\n        }\r\n      });\r\n    }\r\n\r\n    for (var i = 0, l = paths.length; i < l; ++i) {\r\n      var filepaths = glob.sync(paths[i]);\r\n      if(filepaths[0] === undefined && !options.skipMissingResources) {\r\n        throw new gutil.PluginError('gulp-usemin', 'Path ' + paths[i] + ' not found!');\r\n      } else {\r\n        filepaths.forEach(function (filepath) {\r\n          files.push(new gutil.File({\r\n            path: filepath,\r\n            contents: fs.readFileSync(filepath)\r\n          }));\r\n        });\r\n      }\r\n    }\r\n\r\n    return files;\r\n  }\r\n\r\n  for (var i = 0, l = sections.length; i < l; ++i) {\r\n    if (sections[i].match(startReg)) {\r\n      var section = sections[i].split(startReg);\r\n      blocks.push(section[0]);\r\n\r\n      var startCondLine = section[5].match(startCondReg);\r\n      var endCondLine = section[5].match(endCondReg);\r\n      if (startCondLine && endCondLine)\r\n        blocks.push(startCondLine[0]);\r\n\r\n      if (section[1] !== 'remove') {\r\n        if(section[1] === 'htmlimport'){\r\n          blocks.push({\r\n            type: 'htmlimport',\r\n            nameInHTML: section[3],\r\n            name: path.join(outputPath || path.relative(basePath, mainPath), section[4]),\r\n            files: getFiles(section[5], cssReg, section[2]),\r\n            tasks: options[section[1]]\r\n          });\r\n\r\n        }else if (jsReg.test(section[5])) {\r\n          if (section[1].indexOf('inline') !== -1) {\r\n            blocks.push({\r\n              type: 'inlinejs',\r\n              files: getFiles(section[5], jsReg, section[2]),\r\n              tasks: options[section[1]]\r\n            });\r\n          }\r\n          else {\r\n            blocks.push({\r\n              type: 'js',\r\n              nameInHTML: section[3],\r\n              name: path.join(outputPath || path.relative(basePath, mainPath), section[4]),\r\n              files: getFiles(section[5], jsReg, section[2]),\r\n              tasks: options[section[1]]\r\n            });\r\n          }\r\n\r\n        }\r\n        else {\r\n          if (section[1].indexOf('inline') !== -1) {\r\n            blocks.push({\r\n              type: 'inlinecss',\r\n              files: getFiles(section[5], cssReg, section[2]),\r\n              tasks: options[section[1]],\r\n              mediaQuery: cssMediaQuery\r\n            });\r\n          }\r\n          else {\r\n            blocks.push({\r\n              type: 'css',\r\n              nameInHTML: section[3],\r\n              name: path.join(outputPath || path.relative(basePath, mainPath), section[4]),\r\n              files: getFiles(section[5], cssReg, section[2]),\r\n              tasks: options[section[1]],\r\n              mediaQuery: cssMediaQuery\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (startCondLine && endCondLine)\r\n        blocks.push(endCondLine[0]);\r\n    } else\r\n      blocks.push(sections[i]);\r\n  }\r\n\r\n  return blocks;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-gulp-usemin/node_modules/gulp-usemin/lib/htmlBuilder.js":"module.exports = function(file, blocks, options, push, callback) {\n  var path = require('path');\n  var gutil = require('gulp-util');\n  var pipeline = require('./pipeline.js');\n\n  var basePath = file.base;\n  var name = path.basename(file.path);\n  var mainPath = path.dirname(file.path);\n\n  function createFile(name, content) {\n    var filePath = path.join(path.relative(basePath, mainPath), name);\n    return new gutil.File({\n      path: filePath,\n      contents: new Buffer(content)\n    })\n  }\n\n  function createHTMLAttributes(attributes, index){\n    if(!attributes){\n      return '';\n    }\n    var attrArray = [];\n    Object.keys(attributes).forEach(function (attribute) {\n\n      var attributeValue = attributes[attribute];\n\n      if (attributeValue === true) {\n        attrArray.push(attribute);\n        return;\n      }\n      if (attributeValue === false) {\n        return;\n      }\n\n      if (Array.isArray(attributeValue)) {\n        attrArray.push(attribute + '=\"' + attributeValue[index] + '\"');\n      } else {\n        attrArray.push(attribute + '=\"' + attributeValue + '\"');\n      }\n\n    });\n    return ' ' + attrArray.join(' ');\n  }\n\n  var html = [];\n  var jsCounter = 0;\n  var cssCounter = 0;\n  var promises = blocks.map(function(block, i) {\n    return new Promise(function(resolve) {\n      html[i] = '';\n      if (typeof block == 'string') {\n        html[i] = block;\n        resolve();\n      }\n      else if (block.files.length == 0){\n        resolve();\n      }\n      else if (block.type == 'js') {\n        pipeline(block.name, block.files, block.tasks, function(name, file) {\n          push(file);\n          var jsAttributes = options ? options.jsAttributes : null;\n          if (path.extname(file.path) == '.js')\n            html[i] += '<script src=\"' + name.replace(path.basename(name), path.basename(file.path)) +  '\"' + createHTMLAttributes(jsAttributes, jsCounter++) +'></script>';\n          resolve();\n        }.bind(this, block.nameInHTML));\n      }\n      else if (block.type == 'css') {\n        pipeline(block.name, block.files, block.tasks, function(name, file) {\n          push(file);\n          var cssAttributes = options ? options.cssAttributes : null;\n          if (path.extname(file.path) == '.css') {\n            html[i] += '<link rel=\"stylesheet\" href=\"' + name.replace(path.basename(name), path.basename(file.path))\n              + '\"' + (block.mediaQuery ? ' media=\"' + block.mediaQuery + '\"' : '')\n              + createHTMLAttributes(cssAttributes, cssCounter++) +'/>';\n          }\n          resolve();\n        }.bind(this, block.nameInHTML));\n      }\n      else if (block.type == 'inlinejs') {\n        pipeline(block.name, block.files, block.tasks, function(file) {\n          html[i] = '<script>' + String(file.contents) + '</script>';\n          resolve();\n        }.bind(this));\n      }\n      else if (block.type == 'inlinecss') {\n        pipeline(block.name, block.files, block.tasks, function(file) {\n          html[i] = '<style' + (block.mediaQuery ? ' media=\"' + block.mediaQuery + '\"' : '') + '>'\n            + String(file.contents) + '</style>';\n          resolve();\n        }.bind(this));\n      }\n      else if (block.type == 'htmlimport') {\n        pipeline(block.name, block.files, block.tasks, function(name, file) {\n          push(file);\n          html[i] += '<link rel=\"import\" href=\"' + name.replace(path.basename(name), path.basename(file.path)) + '\"/>';\n          resolve();\n        }.bind(this, block.nameInHTML));\n      }\n    });\n  });\n\n  Promise.all(promises).then(function() {\n    var createdFile = createFile(name, html.join(''));\n    pipeline(createdFile.path, [createdFile], options && options['html'], function(file) {\n      callback(null, file);\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-usemin/node_modules/gulp-usemin/lib/pipeline.js":"module.exports = function(name, files, tasks, push) {\n  var through = require('through2');\n  var concat = require('gulp-concat')(name || 'filename.temp', {newLine: '\\n'});\n\n  /* PREPARE TASKS */\n  tasks = (tasks || []).slice();\n\n  var concatIndex = tasks.indexOf('concat');\n  if (concatIndex == -1)\n    tasks.unshift(concat);\n  else\n    tasks[concatIndex] = concat;\n\n  tasks.push(through.obj(function(file, enc, streamCallback) {\n    streamCallback(null, file);\n    push(file);\n  }));\n\n  /* PREPARE TASKS END */\n\n  var stream = through.obj(function(file, enc, streamCallback) {\n    streamCallback(null, file);\n  });\n  var newStream = stream;\n  tasks.forEach(function(task) {\n    newStream = newStream.pipe(typeof(task) == 'function' ? task(): task);\n  });\n\n  files.forEach(stream.write.bind(stream));\n  stream.end();\n};\n"}